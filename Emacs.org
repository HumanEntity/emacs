#+title: Runemacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Startup Performance
Check time that Emacs starts in. Also check garbage collections Emacs did at initialization.

#+begin_src emacs-lisp
  (defun rune/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'rune/display-startup-time)
#+end_src

* Package System Configuration
Configure package system.

** Archives Setup
Configure which package archives to use.

#+begin_src emacs-lisp

  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("elpa" . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ("org" . "https://orgmode.org/elpa/")))
          ;; ("nongnu" . "https://elpa.nongnu.org/nongnu/")
          ;; ("melpa-stable" . "https://stable.melpa.org/packages/")))
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

** Straight.el
*** Download
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src
** Use Package Configuration
Setup of =use-package=

#+begin_src emacs-lisp

  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)

  ;; (package-initialize)

  ;; (setq use-package-always-ensure t)
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))
  ;; (eval-when-compile (require 'use-package))
  ;; ;; (setq use-package-verbose t)
  ;; (setq use-package-always-defer t)
  ;; (setq package-native-compile t)
  ;; (setq comp-deferred-compilation t)

#+end_src

* Keep Folders Clean
Configure =no-littering= package to make Emacs don't leave backup files.

#+begin_src emacs-lisp

  ; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src
* Ui Configuration

** Basic Ui Configuration
Basic setup ui setup.

#+begin_src emacs-lisp

  (defvar rune/default-font-size 180)
  (defvar rune/default-variable-font-size 180)
  (defvar rune/frame-transparency '(90 . 90))

  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)

  (setq inhibit-startup-message t)
  (setq use-dialog-box nil)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (auto-revert-mode 1)
  (set-fringe-mode 10)
  (xterm-mouse-mode 1)
  (column-number-mode)
  (global-auto-revert-mode 1)

  (global-display-line-numbers-mode 1)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))


#+end_src
** Icons
Configure =all-the-icons= package.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :defer nil
    :if (display-graphic-p))
#+end_src
** Font Configuration

#+begin_src emacs-lisp
  (defun rune/configure-font-faces ()
    (set-frame-parameter (selected-frame) 'alpha rune/frame-transparency)
    (add-to-list 'default-frame-alist `(alpha . ,rune/frame-transparency))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))

    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :weight 'light :height rune/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :weight 'light :height  rune/default-font-size)

    (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'light :height 1.3))


  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (setq doom-modeline-icon t)
                  (with-selected-frame frame
                    (rune/configure-font-faces))))
    (rune/configure-font-faces))

#+end_src
** Rainbow-Delimiters
Config of =rainbow-delimiters= for easier development.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Doom-Modeline
=doom-modeline= config.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer nil
    :demand t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src
** Theme Configuration
#+begin_src emacs-lisp

  (use-package doom-themes
    :demand t
    :config
    (load-theme 'doom-palenight t))


#+end_src

* Key Bindings Configuration
** Evil
=evil= package (VIM emulation) configuration.

*** Evil hook

#+begin_src emacs-lisp
  (defun rune/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-char-mode
                    circe-query-mode
                    term-mode
                    sauron-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

#+end_src

*** Evil collection
=evil-collection= setup for mode specified keybindings.

#+begin_src emacs-lisp
  (use-package evil-collection
    :defer nil
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil NerdCommenter
Better commenting =evil-nerd-commenter=.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :after evil
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
*** Evil
=evil= setup.

#+begin_src emacs-lisp

  (use-package evil
    :defer t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    ;;  :hook (evil-mode . rune/evil-hook)
    :config
    (evil-mode)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;; Little code to get mode indication in evil

  (evil-mode nil)
  (evil-mode t)

#+end_src
** General
Configuration of =general=.

  #+begin_src emacs-lisp

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    (use-package general
      :demand
      :config
      ;; (general-evil-setup t)
      (general-create-definer rune/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

      (rune/leader-keys
        "t"  '(:ignore t :which-key "toggles")
        "tt" '(counsel-load-theme :which-key "choose theme"))
      (rune/leader-keys
        "o"  '(:ignore t :which-key "org-mode")
        "oa" '(org-agenda :which-key "Org Agenda")))

#+end_src
* Helpful packages
Helpful packages like =ivy= or =counsel=.

** Ivy and Counsel
Configuration of =ivy= (=ivy-rich=) and =counsel=.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

    ;; Counsel Configuration
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :init
    (counsel-mode t))

#+end_src

** Helpful
Better function descriptions with =helpful=.

#+begin_src emacs-lisp
  ;; Helpful Configuration

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  #+end_src

** Snipets
Some config for snippets with =yasnippet=.

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 0
    :custom
    (yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))
#+End_src
* Org Mode
Org Mode config.

** Auto-tangle config
Automatically tangle config from this file with =org-babel=.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun rune/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rune/org-babel-tangle-config)))

#+end_src

** Org Mode Font Configuration
Font config for =org-mode=.

#+begin_src emacs-lisp

  (defun rune/org-font-setup ()
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))

    (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)

    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

#+end_src

** Org Setup
Config of =org-mode=.

#+begin_src emacs-lisp

  (defun rune/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . rune/org-mode-setup)
    :config
    (message "Org Mod loaded")
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/dev/tasks/OrgFiles/Tasks.org"
            "~/dev/tasks/OrgFiles/Birthdays.org"))

    (org-babel-do-load-languages
     'org-babel-do-load-languages
     '((emacs-lisp . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (setq org-confirm-babel-evaluate nil)

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(r)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1 )))

    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/dev/tasks/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/dev/tasks/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/dev/tasks/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/dev/tasks/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/dev/tasks/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
    (rune/org-font-setup))


#+end_src

** Org-Bullets
Config for =org-mode= headings.

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual fill column
=visual-fill-column= config for better =org-mode= experience.

#+begin_src emacs-lisp
(defun rune/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :defer t
  :hook (org-mode . rune/org-mode-visual-fill))
#+end_src

** Org Roam
Package for building personal knowledge building.

#+begin_src emacs-lisp

  (use-package org-roam
    :after org
    :custom
    (org-roam-directory "~/.RoamNotes")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))
#+end_src
** Org Present
Package for displaying presentations.

#+begin_src emacs-lisp
  (use-package org-present
    :commands (org-present)
    :init
    (add-hook 'org-present-mode-hook 'rune/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'rune/org-present-quit)
    (add-hook 'org-present-after-navigate-functions 'rune/org-present-prepare-slide))

  (defun rune/org-present-prepare-slide (buffer-name heading)
    (org-overview)

    (org-show-entry)

    (org-show-children))

  (defun rune/org-present-start ()
    (evil-normal-state)
    (setq org-hide-emphasis-markers t)
    (setq header-line-format " ")
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.0) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block))))

  (defun rune/org-present-quit ()
    (setq org-hide-emphasis-markers nil)
    (setq header-line-format nil)
    (setq-local face-remapping-alist '((default variable-pitch default))))

#+end_src
* Which-Key
Configuration for =which-key=.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.1 ))

#+end_src

* Project Management
Project management packages configurations.

** Projectile
Setup of =projectile= for project management.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/dev/*")
      (setq projectile-project-search-path '("~/dev/*")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src
*** Counsel Projectile
Integration of =counsel-projectile= with =projectile= for better experience.

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src
** Magit
Integration of =magit= package with =git= version control system.

#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-diff-v1))
#+end_src
*** Forge
Integration with =magit= for managing pull requests and issues.

#+begin_src emacs-lisp
  (use-package forge
    :after magit)
#+end_src

* Completion
Packages helping with completion.

** Corfu
*** Config
Configuration for =corfu= completion.

#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 1)
    (corfu-auto-delay 0.0)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; Do not preview current candidate
    (corfu-preselect-first nil)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets
    (tab-always-indent 'complete)

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC"      . corfu-insert-separator)
                ("TAB"        . corfu-complete)
                ([tab]        . corfu-complete)
                ("<up>"       . corfu-previous)
                ([up]         . corfu-previous)
                ("<down>"     . corfu-next)
                ([down]       . corfu-next)
                ("S-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (global-corfu-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                corfu-quit-no-match t
                                corfu-auto nil)
                (corfu-mode))))

  (corfu-mode 1)
#+end_src

*** Corfu Terminal
Simple =corfu= integration with terminal.

#+begin_src  emacs-lisp
  (use-package corfu-terminal
    :after corfu
    :load-path "lisp/corfu-terminal"
    :config
    (corfu-terminal-mode 1))
#+end_src
** Cape

#+begin_src emacs-lisp
  (use-package cape
    :defer 10
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;; (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    :config
    ;; Silence then pcomplete capf, no errors or messages!
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

    ;; Ensure that pcomplete does not write to the buffer
    ;; and behaves as a pure `completion-at-point-function'.
    (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
#+end_src

** Lsp Mode
*** LSP Support
LSP integration for Emacs.

#+begin_src emacs-lisp
  (use-package lsp-mode
  :defer 1
  :commands (lsp lsp-deferred)
  :init
  ;; (setenv "LSP_USE_PLISTS" "1")
  ;; Increase the amount of data emacs reads from processes
  ;; General lsp-mode settings
  (setq lsp-keymap-prefix "C-c l")
    ;; to enable the lenses
    ;; (add-hook 'lsp-mode-hook #'lsp-lens-mode)
    ;; (add-hook 'lsp-completion-mode-hook
    ;;           (lambda ()
    ;;             (setf (alist-get 'lsp-capf completion-category-defaults)
    ;;                   '((styles . (orderless flex))))))
    :config
    (lsp-enable-which-key-integration t)
    ;; (global-set-key "C-" )
    (use-package lsp-ui
    :after lsp
    :init
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-show-diagnostics t)
    :commands lsp-ui-mode))
    
#+end_src emacs-lisp
*** Languages
LSP servers configurations.

**** Rust

#+begin_src emacs-lisp

  (use-package rust-mode
    :defer t
    :mode "\\.rs\\'"
    :hook (rust-mode . lsp-deferred)
    :config
    :init
    ;; scratchpad for rust
    (setq lsp-rust-clippy-preference "on")
    (use-package rust-playground
      :commands (rust-playground)))
#+end_src
**** Python

#+begin_src emacs-lisp

  (use-package lsp-pyright
    :defer t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))  ; or lsp-deferred

#+end_src
**** C/C++

#+begin_src emacs-lisp
  (use-package ccls
    :defer t
    :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda () (require 'ccls) (lsp-deferred))))
#+end_src
**** Typescript

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src
*** DAP Support
Basic support for DAP in Emacs.

#+begin_src emacs-lisp

  (use-package dap-mode
    :commands dap-debug
    :config
    (dap-ui-mode)

    ;; (require 'dap-codelldb)
    ;; (require 'dap-lldb)
    (require 'dap-gdb-lldb)
    (require 'dap-cpptools)

    ;; (dap-codelldb-setup)
    (dap-cpptools-setup)
    (dap-gdb-lldb-setup))
    ;;(require 'dap-codelldb)
    ;; installs .extension/vscode
    ;;(dap-codelldb-setup)
    ;;(dap-cpptools-setup))
    ;;:custom
    ;; (dap-auto-configure-features '(sessions locals breakpoints expressions repl controls tooltip))
    ;;(dap-lldb-debug-program `(,(expand-file-name "/opt/homebrew/opt/llvm/bin/lldb"))))
#+end_src
**** Languages
***** Rust
#+begin_src emacs-lisp
  (with-eval-after-load 'dap-mode
    (dap-register-debug-template
     "Rust::LLDB Run Configuration"
     (list :type "cppdbg"
           :request "launch"
           :name "Rust::Run"
           :MIMode "lldb"
           :miDebuggerPath "rust-lldb"
           :enviroment []
           :program "${workspaceFolder}/target/debug/${target}"
           :cwd "${workspaceFolder}"
           :console "external"
           :dap-compilation "cargo build"
           :dap-compilation-dir "${workspaceFolder}")))
#+end_src
* Terminal
Terminal integration for Emacs.

** term-mode
Terminal emulator writter in *Emacs Lisp*.

#+begin_src emacs-lisp

  (use-package term
    :commands term
    :config
    (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
  
#+end_src

*** Better Terminal Collors
Better terminal colors in =term-mode=.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm
Terminal emulator written in native code.

#+begin_src emacs-lisp
  (use-package vterm
    :commands (vterm vterm-other-window)
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src
** eshell
Shell written in Emacs Lisp. 

#+begin_src emacs-lisp

  (defun rune/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

    (use-package eshell-git-prompt
      :after eshell-)

    (use-package eshell
      :hook (eshell-first-time-mode . rune/configure-eshell)
      :config

      (with-eval-after-load 'esh-opt
        (setq eshell-destroy-buffer-when-process-dies t)
        (setq eshell-visual-commands '("htop" "zsh" "vim")))

      (eshell-git-prompt-use-theme 'multiline))

#+end_src
* File Management
** Dired
Builtin file manager in Emacs.

#+begin_src emacs-lisp

  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :after dired
    :config
    ;; (add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

  (use-package dired-hide-dotfiles
    :after evil-collection
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
                                "H" 'dired-hide-dotfiles-mode))

  (use-package dired
    :straight nil
    :defer 0
    :after evil-collection
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
                                "h" 'dired-single-up-directory
                                "l" 'dired-single-buffer))


#+end_src
* Buffer Management
Buffer management with =perspective=.

#+begin_src emacs-lisp
    (use-package perspective
      :demand t
      :custom
      (persp-initial-frame-name "Main")
      (persp-mode-prefix-key (kbd "C-x x"))
      :bind (("C-x k" . persp-kill-buffer*))
      :init
      (unless (equal persp-mode t)
        (persp-mode)))
#+end_src
* Fun
** Speed-type
Simple application for speed typing.

#+begin_src emacs-lisp
  (use-package speed-type
    :defer 1)
#+end_src
* ERC
#+begin_src emacs-lisp

  ;; (use-package erc
  ;;   :custom
  ;;   (erc-nick "HumanEntity"))

  ;;  (with-eval-after-load 'erc
  ;;    (load "~/.emacs.d/lisp/erc/erc-sasl.el")

  ;;    (require 'erc-sasl)
  ;;    (add-to-list 'erc-sasl-server-regexp-list "irc\\.libera\\.chat")

  ;;    ;; Redefine/Override the erc-login() function from the erc package, so that
  ;;    ;; it now uses SASL
  ;;    (defun erc-login ()
  ;;      "Perform user authentication at the IRC server. (PATCHED)"
  ;;      (erc-log (format "login: nick: %s, user: %s %s %s :%s"
  ;;                       (erc-current-nick)
  ;;                       (user-login-name)
  ;;                       (or erc-system-name (system-name))
  ;;                       erc-session-server
  ;;                       erc-session-user-full-name))
  ;;      (if erc-session-password
  ;;          (erc-server-send (format "PASS %s" erc-session-password))
  ;;        (message "Logging in without password"))
  ;;      (when (and (featurep 'erc-sasl) (erc-sasl-use-sasl-p))
  ;;        (erc-server-send "CAP REQ :sasl"))
  ;;      (erc-server-send (format "NICK %s" (erc-current-nick)))
  ;;      (erc-server-send
  ;;       (format "USER %s %s %s :%s"
  ;;               ;; hacked - S.B.
  ;;               (if erc-anonymous-login erc-email-userid (user-login-name))
  ;;               "0" "*"
  ;;               erc-session-user-full-name))
  ;;      (erc-update-mode-line)))

  ;;  (defun rune/erc-chat ()
  ;;    (erc-tls :server "irc.libera.chat" :port 6697 :nick "HumanEntity"
  ;;    :full-name "HumanEntity"
  ;;    :password "HuM@n@b1e"))
#+end_src
* Tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4) ; Assuming you want your tabs to be four spaces wide
#+end_src
* Dynamic tiling window management
#+begin_src emacs-lisp
  (use-package edwina
    :config
    (setq display-buffer-base-action '(display-buffer-below-selected))
    (edwina-mode 1))
#+end_src
* Spliting Configuration
Configuration for making Emacs prefer vertical splits.

#+begin_src emacs-lisp
;; 
;;   (defun split-window-sensibly-prefer-horizontal (&optional window)
;;   "Based on split-window-sensibly, but designed to prefer a horizontal split,
;;   i.e. windows tiled side-by-side."
;;     (let ((window (or window (selected-window))))
;;       (or (and (window-splittable-p window t)
;;            ;; Split window horizontally
;;            (with-selected-window window
;;              (split-window-right)))
;;       (and (window-splittable-p window)
;;            ;; Split window vertically
;;            (with-selected-window window
;;              (split-window-below)))
;;       (and
;;            ;; If WINDOW is the only usable window on its frame (it is
;;            ;; the only one or, not being the only one, all the other
;;            ;; ones are dedicated) and is not the minibuffer window, try
;;            ;; to split it horizontally disregarding the value of
;;            ;; `split-height-threshold'.
;;            (let ((frame (window-frame window)))
;;              (or
;;               (eq window (frame-root-window frame))
;;               (catch 'done
;;                 (walk-window-tree (lambda (w)
;;                                     (unless (or (eq w window)
;;                                                 (window-dedicated-p w))
;;                                       (throw 'done nil)))
;;                                   frame)
;;                 t)))
;;        (not (window-minibuffer-p window))
;;        (let ((split-width-threshold 0))
;;          (when (window-splittable-p window t)
;;            (with-selected-window window
;;              (split-window-right))))))))
;; 
;;   (defun split-window-really-sensibly (&optional window)
;;     (let ((window (or window (selected-window))))
;;       (if (> (window-total-width window) (* 2 (window-total-height window)))
;;           (with-selected-window window (split-window-sensibly-prefer-horizontal window))
;;         (with-selected-window window (split-window-sensibly window)))))
;; 
;;   (setq split-height-threshold 4
;;         split-width-threshold 40
;;         split-window-preferred-function 'split-window-really-sensibly)
#+end_src
